function cov_20k02z0rmk(){var path="/Users/robertpringle/Documents/GitHub/Individual-Project/src/routes/password.js";var hash="14b0da858acf2d835872cb2e5175acc7a6272c66";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/robertpringle/Documents/GitHub/Individual-Project/src/routes/password.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1,column:27}},"1":{start:{line:2,column:16},end:{line:2,column:34}},"2":{start:{line:3,column:19},end:{line:3,column:40}},"3":{start:{line:4,column:15},end:{line:4,column:32}},"4":{start:{line:5,column:15},end:{line:5,column:34}},"5":{start:{line:6,column:24},end:{line:6,column:64}},"6":{start:{line:7,column:18},end:{line:7,column:42}},"7":{start:{line:9,column:14},end:{line:9,column:31}},"8":{start:{line:10,column:13},end:{line:10,column:33}},"9":{start:{line:13,column:22},end:{line:19,column:2}},"10":{start:{line:21,column:15},end:{line:21,column:31}},"11":{start:{line:23,column:0},end:{line:53,column:6}},"12":{start:{line:24,column:22},end:{line:24,column:30}},"13":{start:{line:27,column:17},end:{line:27,column:51}},"14":{start:{line:30,column:4},end:{line:33,column:5}},"15":{start:{line:31,column:6},end:{line:31,column:59}},"16":{start:{line:32,column:6},end:{line:32,column:13}},"17":{start:{line:36,column:19},end:{line:36,column:41}},"18":{start:{line:37,column:18},end:{line:37,column:40}},"19":{start:{line:40,column:4},end:{line:40,column:116}},"20":{start:{line:43,column:17},end:{line:48,column:5}},"21":{start:{line:51,column:4},end:{line:51,column:39}},"22":{start:{line:52,column:4},end:{line:52,column:129}},"23":{start:{line:55,column:2},end:{line:80,column:6}},"24":{start:{line:56,column:17},end:{line:56,column:108}},"25":{start:{line:59,column:4},end:{line:62,column:5}},"26":{start:{line:60,column:6},end:{line:60,column:59}},"27":{start:{line:61,column:6},end:{line:61,column:13}},"28":{start:{line:65,column:4},end:{line:68,column:5}},"29":{start:{line:66,column:6},end:{line:66,column:68}},"30":{start:{line:67,column:6},end:{line:67,column:13}},"31":{start:{line:71,column:17},end:{line:71,column:45}},"32":{start:{line:72,column:25},end:{line:72,column:71}},"33":{start:{line:74,column:4},end:{line:74,column:33}},"34":{start:{line:75,column:4},end:{line:75,column:32}},"35":{start:{line:76,column:4},end:{line:76,column:35}},"36":{start:{line:77,column:4},end:{line:77,column:22}},"37":{start:{line:79,column:4},end:{line:79,column:58}},"38":{start:{line:82,column:2},end:{line:82,column:26}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:23,column:47},end:{line:23,column:48}},loc:{start:{line:23,column:73},end:{line:53,column:3}},line:23},"1":{name:"(anonymous_1)",decl:{start:{line:55,column:48},end:{line:55,column:49}},loc:{start:{line:55,column:74},end:{line:80,column:3}},line:55}},branchMap:{"0":{loc:{start:{line:30,column:4},end:{line:33,column:5}},type:"if",locations:[{start:{line:30,column:4},end:{line:33,column:5}},{start:{line:30,column:4},end:{line:33,column:5}}],line:30},"1":{loc:{start:{line:47,column:102},end:{line:47,column:126}},type:"binary-expr",locations:[{start:{line:47,column:102},end:{line:47,column:118}},{start:{line:47,column:122},end:{line:47,column:126}}],line:47},"2":{loc:{start:{line:59,column:4},end:{line:62,column:5}},type:"if",locations:[{start:{line:59,column:4},end:{line:62,column:5}},{start:{line:59,column:4},end:{line:62,column:5}}],line:59},"3":{loc:{start:{line:65,column:4},end:{line:68,column:5}},type:"if",locations:[{start:{line:65,column:4},end:{line:68,column:5}},{start:{line:65,column:4},end:{line:68,column:5}}],line:65}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"14b0da858acf2d835872cb2e5175acc7a6272c66"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_20k02z0rmk=function(){return actualCoverage;};}return actualCoverage;}cov_20k02z0rmk();cov_20k02z0rmk().s[0]++;require("dotenv").config();const express=(cov_20k02z0rmk().s[1]++,require('express'));const nodemailer=(cov_20k02z0rmk().s[2]++,require('nodemailer'));const crypto=(cov_20k02z0rmk().s[3]++,require('crypto'));const bcrypt=(cov_20k02z0rmk().s[4]++,require("bcryptjs"));const asyncMiddleware=(cov_20k02z0rmk().s[5]++,require('../middleware/asyncMiddleware'));const UserModel=(cov_20k02z0rmk().s[6]++,require('../model/user'));const email=(cov_20k02z0rmk().s[7]++,process.env.EMAIL);const pass=(cov_20k02z0rmk().s[8]++,process.env.PASSWORD);//Sets up email to send password reset links
const smtpTransport=(cov_20k02z0rmk().s[9]++,nodemailer.createTransport({service:'Gmail',auth:{user:email,pass:pass}}));const router=(cov_20k02z0rmk().s[10]++,express.Router());cov_20k02z0rmk().s[11]++;router.post('/forgotPassword',asyncMiddleware(async(req,res,next)=>{cov_20k02z0rmk().f[0]++;const{email}=(cov_20k02z0rmk().s[12]++,req.body);//Finds the user with the email entered
const user=(cov_20k02z0rmk().s[13]++,await UserModel.findOne({email}));//Checks to see of email entered is on the system
cov_20k02z0rmk().s[14]++;if(!user){cov_20k02z0rmk().b[0][0]++;cov_20k02z0rmk().s[15]++;res.status(400).json({'message':'invalid email'});cov_20k02z0rmk().s[16]++;return;}else{cov_20k02z0rmk().b[0][1]++;}//Generates user token to send to user
const buffer=(cov_20k02z0rmk().s[17]++,crypto.randomBytes(20));const token=(cov_20k02z0rmk().s[18]++,buffer.toString('hex'));// update user reset password token and exp
cov_20k02z0rmk().s[19]++;await UserModel.findByIdAndUpdate({_id:user._id},{resetToken:token,resetTokenExp:Date.now()+600000});//Constructs email to send
const data=(cov_20k02z0rmk().s[20]++,{to:user.email,from:email,subject:'Explore MMO Password Reset',text:"You username is: "+user.username+". Reset you password using "+`${process.env.URL}${(cov_20k02z0rmk().b[1][0]++,process.env.PORT)||(cov_20k02z0rmk().b[1][1]++,3020)}/resetPassword.html?token=${token}`});//Sends email
cov_20k02z0rmk().s[21]++;await smtpTransport.sendMail(data);cov_20k02z0rmk().s[22]++;res.status(200).json({message:'A password reset link has been sent to your email and will only be valid for 10 minutes!'});}));cov_20k02z0rmk().s[23]++;router.post('/resetPassword',asyncMiddleware(async(req,res,next)=>{cov_20k02z0rmk().f[1]++;const user=(cov_20k02z0rmk().s[24]++,await UserModel.findOne({resetToken:req.body.token,resetTokenExp:{$gt:Date.now()}}));//If token is invalid inform users
cov_20k02z0rmk().s[25]++;if(!user){cov_20k02z0rmk().b[2][0]++;cov_20k02z0rmk().s[26]++;res.status(400).json({'message':'invalid token'});cov_20k02z0rmk().s[27]++;return;}else{cov_20k02z0rmk().b[2][1]++;}//Checks to see the password match and if not informs user
cov_20k02z0rmk().s[28]++;if(req.body.password!==req.body.verifiedPassword){cov_20k02z0rmk().b[3][0]++;cov_20k02z0rmk().s[29]++;res.status(400).json({'message':'passwords do not match'});cov_20k02z0rmk().s[30]++;return;}else{cov_20k02z0rmk().b[3][1]++;}//If passwoed match update the password using hashing
const salt=(cov_20k02z0rmk().s[31]++,await bcrypt.genSaltSync(10));const hashPassword=(cov_20k02z0rmk().s[32]++,await bcrypt.hashSync(req.body.password,salt));cov_20k02z0rmk().s[33]++;user.password=hashPassword;cov_20k02z0rmk().s[34]++;user.resetToken=undefined;cov_20k02z0rmk().s[35]++;user.resetTokenExp=undefined;cov_20k02z0rmk().s[36]++;await user.save();cov_20k02z0rmk().s[37]++;res.status(200).json({message:'password updated'});}));cov_20k02z0rmk().s[38]++;module.exports=router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,